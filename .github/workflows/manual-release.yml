name: Build and Release FuckDevicePolicy

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code (integer)'
        required: true
        default: '1'
      release_notes:
        description: 'Release notes'
        required: true
        default: 'Enhanced version with comprehensive device policy bypass coverage'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install ImageMagick for icon creation
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick bc

      - name: Create project structure
        run: |
          mkdir -p app/src/main/java/com/fuckdevicepolicy
          mkdir -p app/src/main/assets/xposed
          mkdir -p app/src/main/res/values
          mkdir -p app/src/main/res/drawable
          mkdir -p app/src/main/res/mipmap-hdpi
          mkdir -p app/src/main/res/mipmap-mdpi  
          mkdir -p app/src/main/res/mipmap-xhdpi
          mkdir -p app/src/main/res/mipmap-xxhdpi
          mkdir -p app/src/main/res/mipmap-xxxhdpi
          mkdir -p app/libs

      - name: Create enhanced XposedHook.java
        run: |
          cat > app/src/main/java/com/fuckdevicepolicy/XposedHook.java << 'EOF'
          package com.fuckdevicepolicy;

          import de.robv.android.xposed.IXposedHookLoadPackage;
          import de.robv.android.xposed.XC_MethodHook;
          import de.robv.android.xposed.XC_MethodReplacement;
          import de.robv.android.xposed.XposedBridge;
          import de.robv.android.xposed.XposedHelpers;
          import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;
          import android.app.admin.DevicePolicyManager;
          import android.content.ComponentName;
          import android.os.UserHandle;

          public class XposedHook implements IXposedHookLoadPackage {
              
              private static final String TAG = "FuckDevicePolicy";
              
              @Override
              public void handleLoadPackage(LoadPackageParam lpparam) throws Throwable {
                  if ("android".equals(lpparam.packageName) || 
                      "com.android.settings".equals(lpparam.packageName) ||
                      "com.android.packageinstaller".equals(lpparam.packageName) ||
                      "com.google.android.packageinstaller".equals(lpparam.packageName) ||
                      "com.android.systemui".equals(lpparam.packageName)) {
                      
                      XposedBridge.log(TAG + ": Hooking package: " + lpparam.packageName);
                      hookDevicePolicyRestrictions(lpparam);
                  }
              }
              
              private void hookDevicePolicyRestrictions(LoadPackageParam lpparam) {
                  try {
                      hookUnknownSourcesRestrictions(lpparam);
                      hookDebuggingRestrictions(lpparam);
                      hookCopyPasteRestrictions(lpparam);
                      hookSharingRestrictions(lpparam);
                      hookBluetoothRestrictions(lpparam);
                      hookContentCaptureRestrictions(lpparam);
                      hookFunRestrictions(lpparam);
                      hookLocationSharingRestrictions(lpparam);
                      hookWindowCreationRestrictions(lpparam);
                      hookWifiSharingRestrictions(lpparam);
                      hookSystemErrorDialogRestrictions(lpparam);
                      hookAppVerificationRestrictions(lpparam);
                      hookGeneralDevicePolicyRestrictions(lpparam);
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error in hookDevicePolicyRestrictions: " + t.getMessage());
                  }
              }
              
              private void hookUnknownSourcesRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.content.pm.PackageManager", lpparam.classLoader,
                          "canRequestPackageInstalls", new XC_MethodReplacement() {
                              @Override
                              protected Object replaceHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Bypassing canRequestPackageInstalls restriction");
                                  return true;
                              }
                          });
                      
                      XposedHelpers.findAndHookMethod("android.provider.Settings.Global", lpparam.classLoader,
                          "getInt", android.content.ContentResolver.class, String.class, int.class,
                          new XC_MethodHook() {
                              @Override
                              protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                                  String key = (String) param.args[1];
                                  if ("install_non_market_apps".equals(key)) {
                                      XposedBridge.log(TAG + ": Bypassing install_non_market_apps restriction");
                                      param.setResult(1);
                                  }
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking unknown sources: " + t.getMessage());
                  }
              }
              
              private void hookDebuggingRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.os.UserManager", lpparam.classLoader,
                          "isDevelopmentSettingsEnabled", new XC_MethodReplacement() {
                              @Override
                              protected Object replaceHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Bypassing development settings restriction");
                                  return true;
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking debugging restrictions: " + t.getMessage());
                  }
              }
              
              private void hookCopyPasteRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.app.admin.DevicePolicyManager", lpparam.classLoader,
                          "getCrossProfileCallerIdDisabled", ComponentName.class, new XC_MethodReplacement() {
                              @Override
                              protected Object replaceHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Bypassing cross profile copy/paste restriction");
                                  return false;
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking copy/paste restrictions: " + t.getMessage());
                  }
              }
              
              private void hookSharingRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.app.admin.DevicePolicyManager", lpparam.classLoader,
                          "getCrossProfileContactsSearchDisabled", ComponentName.class, new XC_MethodReplacement() {
                              @Override
                              protected Object replaceHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Bypassing cross profile sharing restriction");
                                  return false;
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking sharing restrictions: " + t.getMessage());
                  }
              }
              
              private void hookBluetoothRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.bluetooth.BluetoothAdapter", lpparam.classLoader,
                          "isEnabled", new XC_MethodHook() {
                              @Override
                              protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Ensuring Bluetooth sharing is available");
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking Bluetooth restrictions: " + t.getMessage());
                  }
              }
              
              private void hookContentCaptureRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.view.contentcapture.ContentCaptureManager", lpparam.classLoader,
                          "isContentCaptureEnabled", new XC_MethodReplacement() {
                              @Override
                              protected Object replaceHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Bypassing content capture restriction");
                                  return true;
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking content capture restrictions: " + t.getMessage());
                  }
              }
              
              private void hookFunRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.app.admin.DevicePolicyManager", lpparam.classLoader,
                          "getCameraDisabled", ComponentName.class, new XC_MethodReplacement() {
                              @Override
                              protected Object replaceHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Bypassing camera restriction");
                                  return false;
                              }
                          });
                      
                      XposedHelpers.findAndHookMethod("android.app.admin.DevicePolicyManager", lpparam.classLoader,
                          "isApplicationHidden", ComponentName.class, String.class, new XC_MethodReplacement() {
                              @Override
                              protected Object replaceHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Bypassing application hidden restriction");
                                  return false;
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking fun restrictions: " + t.getMessage());
                  }
              }
              
              private void hookLocationSharingRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.location.LocationManager", lpparam.classLoader,
                          "isLocationEnabled", new XC_MethodHook() {
                              @Override
                              protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Ensuring location sharing is available");
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking location restrictions: " + t.getMessage());
                  }
              }
              
              private void hookWindowCreationRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.view.WindowManager", lpparam.classLoader,
                          "getDefaultDisplay", new XC_MethodHook() {
                              @Override
                              protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Bypassing window creation restrictions");
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking window restrictions: " + t.getMessage());
                  }
              }
              
              private void hookWifiSharingRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.net.wifi.WifiManager", lpparam.classLoader,
                          "isWifiEnabled", new XC_MethodHook() {
                              @Override
                              protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Ensuring WiFi sharing is available");
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking WiFi restrictions: " + t.getMessage());
                  }
              }
              
              private void hookSystemErrorDialogRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("com.android.internal.app.AlertActivity", lpparam.classLoader,
                          "onCreate", android.os.Bundle.class, new XC_MethodHook() {
                              @Override
                              protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                                  XposedBridge.log(TAG + ": Allowing system error dialogs");
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking system dialog restrictions: " + t.getMessage());
                  }
              }
              
              private void hookAppVerificationRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.content.pm.PackageManager", lpparam.classLoader,
                          "getApplicationEnabledSetting", String.class, new XC_MethodHook() {
                              @Override
                              protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                                  String packageName = (String) param.args[0];
                                  if (packageName != null && packageName.contains("verify")) {
                                      XposedBridge.log(TAG + ": Bypassing app verification for: " + packageName);
                                      param.setResult(android.content.pm.PackageManager.COMPONENT_ENABLED_STATE_ENABLED);
                                  }
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking app verification: " + t.getMessage());
                  }
              }
              
              private void hookGeneralDevicePolicyRestrictions(LoadPackageParam lpparam) {
                  try {
                      XposedHelpers.findAndHookMethod("android.os.UserManager", lpparam.classLoader,
                          "getUserRestrictions", new XC_MethodHook() {
                              @Override
                              protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                                  android.os.Bundle restrictions = (android.os.Bundle) param.getResult();
                                  if (restrictions != null) {
                                      restrictions.remove("no_install_unknown_sources");
                                      restrictions.remove("no_install_unknown_sources_globally");
                                      restrictions.remove("no_debugging_features");
                                      restrictions.remove("no_cross_profile_copy_paste");
                                      restrictions.remove("no_sharing_into_profile");
                                      restrictions.remove("no_bluetooth_sharing");
                                      restrictions.remove("no_content_capture");
                                      restrictions.remove("no_fun");
                                      restrictions.remove("no_share_location");
                                      restrictions.remove("no_create_windows");
                                      restrictions.remove("no_sharing_admin_configured_wifi");
                                      restrictions.remove("no_system_error_dialogs");
                                      restrictions.remove("ensure_verify_apps");
                                      
                                      XposedBridge.log(TAG + ": Removed all device policy restrictions from bundle");
                                      param.setResult(restrictions);
                                  }
                              }
                          });
                      
                      XposedHelpers.findAndHookMethod("android.os.UserManager", lpparam.classLoader,
                          "hasUserRestriction", String.class, new XC_MethodHook() {
                              @Override
                              protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                                  String restriction = (String) param.args[0];
                                  if (restriction != null && (
                                      restriction.equals("no_install_unknown_sources") ||
                                      restriction.equals("no_install_unknown_sources_globally") ||
                                      restriction.equals("no_debugging_features") ||
                                      restriction.equals("no_cross_profile_copy_paste") ||
                                      restriction.equals("no_sharing_into_profile") ||
                                      restriction.equals("no_bluetooth_sharing") ||
                                      restriction.equals("no_content_capture") ||
                                      restriction.equals("no_fun") ||
                                      restriction.equals("no_share_location") ||
                                      restriction.equals("no_create_windows") ||
                                      restriction.equals("no_sharing_admin_configured_wifi") ||
                                      restriction.equals("no_system_error_dialogs") ||
                                      restriction.equals("ensure_verify_apps"))) {
                                      
                                      XposedBridge.log(TAG + ": Bypassing restriction: " + restriction);
                                      param.setResult(false);
                                  }
                              }
                          });
                  } catch (Throwable t) {
                      XposedBridge.log(TAG + ": Error hooking general restrictions: " + t.getMessage());
                  }
              }
          }
          EOF

      - name: Create MainActivity.java
        run: |
          cat > app/src/main/java/com/fuckdevicepolicy/MainActivity.java << 'EOF'
          package com.fuckdevicepolicy;

          import android.app.Activity;
          import android.os.Bundle;
          import android.widget.TextView;
          import android.widget.LinearLayout;
          import android.view.Gravity;
          import android.graphics.Color;

          public class MainActivity extends Activity {
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  LinearLayout layout = new LinearLayout(this);
                  layout.setOrientation(LinearLayout.VERTICAL);
                  layout.setGravity(Gravity.CENTER);
                  layout.setBackgroundColor(Color.parseColor("#1e1e1e"));
                  layout.setPadding(50, 50, 50, 50);
                  
                  TextView title = new TextView(this);
                  title.setText("🖕 FuckDevicePolicy");
                  title.setTextSize(28);
                  title.setTextColor(Color.parseColor("#ff6b6b"));
                  title.setGravity(Gravity.CENTER);
                  title.setPadding(0, 0, 0, 30);
                  
                  TextView status = new TextView(this);
                  status.setText("✅ Enhanced Module Active\n\n🔓 Comprehensive Policy Bypass:\n\n" +
                      "• Unknown Sources Installation\n" +
                      "• Developer/Debug Features\n" +
                      "• Cross-Profile Operations\n" +
                      "• Bluetooth & WiFi Sharing\n" +
                      "• Content Capture\n" +
                      "• Location Sharing\n" +
                      "• Camera & Fun Features\n" +
                      "• System Dialogs\n" +
                      "• App Verification\n" +
                      "• Window Creation\n\n" +
                      "⚠️ Requires LSPosed/Xposed Framework\n" +
                      "🔄 Reboot after enabling module");
                  status.setTextSize(16);
                  status.setTextColor(Color.parseColor("#4ecdc4"));
                  status.setLineHeight(24);
                  
                  layout.addView(title);
                  layout.addView(status);
                  setContentView(layout);
              }
          }
          EOF

      - name: Create AndroidManifest.xml
        run: |
          cat > app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.fuckdevicepolicy"
              android:versionCode="${{ github.event.inputs.version_code }}"
              android:versionName="${{ github.event.inputs.version_name }}">

              <uses-sdk
                  android:minSdkVersion="21"
                  android:targetSdkVersion="34" />

              <application
                  android:allowBackup="false"
                  android:icon="@mipmap/ic_launcher"
                  android:label="FuckDevicePolicy"
                  android:theme="@android:style/Theme.DeviceDefault">

                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:label="FuckDevicePolicy">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>

                  <meta-data
                      android:name="xposedmodule"
                      android:value="true" />
                  <meta-data
                      android:name="xposeddescription"
                      android:value="Enhanced bypass for comprehensive device policy restrictions including unknown sources, debugging, sharing, content capture, and more" />
                  <meta-data
                      android:name="xposedminversion"
                      android:value="54" />

              </application>
          </manifest>
          EOF

      - name: Create xposed_init
        run: |
          echo "com.fuckdevicepolicy.XposedHook" > app/src/main/assets/xposed_init

      - name: Create strings.xml
        run: |
          cat > app/src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">FuckDevicePolicy</string>
              <string name="xposed_description">Enhanced bypass for comprehensive device policy restrictions</string>
          </resources>
          EOF

      - name: Create app icons
        run: |
          convert -size 48x48 xc:"#ff6b6b" -fill "#ffffff" -pointsize 20 -gravity center -annotate +0+0 "F" app/src/main/res/mipmap-hdpi/ic_launcher.png
          convert -size 32x32 xc:"#ff6b6b" -fill "#ffffff" -pointsize 16 -gravity center -annotate +0+0 "F" app/src/main/res/mipmap-mdpi/ic_launcher.png
          convert -size 64x64 xc:"#ff6b6b" -fill "#ffffff" -pointsize 24 -gravity center -annotate +0+0 "F" app/src/main/res/mipmap-xhdpi/ic_launcher.png
          convert -size 96x96 xc:"#ff6b6b" -fill "#ffffff" -pointsize 36 -gravity center -annotate +0+0 "F" app/src/main/res/mipmap-xxhdpi/ic_launcher.png
          convert -size 128x128 xc:"#ff6b6b" -fill "#ffffff" -pointsize 48 -gravity center -annotate +0+0 "F" app/src/main/res/mipmap-xxxhdpi/ic_launcher.png

      - name: Create minimal Xposed API stub
        run: |
          mkdir -p temp_api/de/robv/android/xposed
          mkdir -p temp_api/de/robv/android/xposed/callbacks
          
          # Create IXposedHookLoadPackage.java
          cat > temp_api/de/robv/android/xposed/IXposedHookLoadPackage.java << 'EOF'
          package de.robv.android.xposed;
          import de.robv.android.xposed.callbacks.XC_LoadPackage;
          public interface IXposedHookLoadPackage {
              void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable;
          }
          EOF
          
          # Create XC_MethodHook.java
          cat > temp_api/de/robv/android/xposed/XC_MethodHook.java << 'EOF'
          package de.robv.android.xposed;
          public abstract class XC_MethodHook {
              public static class MethodHookParam {
                  public Object[] args;
                  public Object getResult() { return null; }
                  public void setResult(Object result) {}
              }
              protected void beforeHookedMethod(MethodHookParam param) throws Throwable {}
              protected void afterHookedMethod(MethodHookParam param) throws Throwable {}
          }
          EOF
          
          # Create XC_MethodReplacement.java  
          cat > temp_api/de/robv/android/xposed/XC_MethodReplacement.java << 'EOF'
          package de.robv.android.xposed;
          public abstract class XC_MethodReplacement extends XC_MethodHook {
              protected abstract Object replaceHookedMethod(MethodHookParam param) throws Throwable;
          }
          EOF
          
          # Create XposedBridge.java
          cat > temp_api/de/robv/android/xposed/XposedBridge.java << 'EOF'
          package de.robv.android.xposed;
          public class XposedBridge {
              public static void log(String message) {}
          }
          EOF
          
          # Create XposedHelpers.java
          cat > temp_api/de/robv/android/xposed/XposedHelpers.java << 'EOF'
          package de.robv.android.xposed;
          public class XposedHelpers {
              public static void findAndHookMethod(String className, ClassLoader classLoader, String methodName, Object... parameterTypesAndCallback) {}
              public static void findAndHookMethod(Class<?> clazz, String methodName, Object... parameterTypesAndCallback) {}
          }
          EOF
          
          # Create LoadPackageParam.java
          cat > temp_api/de/robv/android/xposed/callbacks/XC_LoadPackage.java << 'EOF'
          package de.robv.android.xposed.callbacks;
          public class XC_LoadPackage {
              public static class LoadPackageParam {
                  public String packageName;
                  public ClassLoader classLoader;
              }
          }
          EOF
          
          # Compile the stub API
          mkdir -p app/libs
          javac -d temp_classes temp_api/de/robv/android/xposed/*.java temp_api/de/robv/android/xposed/callbacks/*.java
          cd temp_classes && jar cf ../app/libs/api-82.jar de/
          cd ..
          
          echo "Created minimal Xposed API stub for compilation"

      - name: Create build.gradle
        run: |
          cat > app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }

          android {
              namespace 'com.fuckdevicepolicy'
              compileSdk 34

              defaultConfig {
                  applicationId "com.fuckdevicepolicy"
                  minSdk 21
                  targetSdk 34
                  versionCode Integer.parseInt("${{ github.event.inputs.version_code }}")
                  versionName "${{ github.event.inputs.version_name }}"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }

          dependencies {
              compileOnly files('libs/api-82.jar')
          }
          EOF

      - name: Create settings.gradle
        run: |
          cat > settings.gradle << 'EOF'
          pluginManagement {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }
          dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories {
                  google()
                  mavenCentral()
              }
          }

          rootProject.name = "FuckDevicePolicy"
          include ':app'
          EOF

      - name: Create root build.gradle
        run: |
          cat > build.gradle << 'EOF'
          plugins {
              id 'com.android.application' version '8.1.0' apply false
          }
          EOF

      - name: Setup Gradle Wrapper
        run: |
          # Use Gradle 8.5 (more stable than 8.0)
          gradle wrapper --gradle-version 8.5 --distribution-type bin
          
          # Update build.gradle to fix compatibility issues
          cat > app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application' version '8.1.2'
          }
          
          android {
              namespace 'com.fuckdevicepolicy'
              compileSdk 34
              
              defaultConfig {
                  applicationId "com.fuckdevicepolicy"
                  minSdk 21
                  targetSdk 34
                  versionCode System.getenv('VERSION_CODE')?.toInteger() ?: 1
                  versionName System.getenv('VERSION_NAME') ?: '1.0.0'
                  
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
              
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
              
              packagingOptions {
                  resources {
                      excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt']
                  }
              }
          }
          
          dependencies {
              compileOnly fileTree(dir: 'libs', include: ['*.jar'])
              implementation 'androidx.appcompat:appcompat:1.6.1'
              
              testImplementation 'junit:junit:4.13.2'
              androidTestImplementation 'androidx.test.ext:junit:1.1.5'
              androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
          }
          EOF
          
          # Also update the root build.gradle
          cat > build.gradle << 'EOF'
          buildscript {
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.1.2'
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          tasks.register('clean', Delete) {
              delete rootProject.buildDir
          }
          EOF
          
          # Update gradle.properties for compatibility
          cat > gradle.properties << 'EOF'
          # Project-wide Gradle settings
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          org.gradle.parallel=true
          org.gradle.caching=true
          
          # Android settings
          android.useAndroidX=true
          android.enableJetifier=true
          android.nonTransitiveRClass=false
          android.enableR8.fullMode=false
          EOF
          
          echo "Updated Gradle configuration for compatibility"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build APK
        run: ./gradlew assembleRelease --stacktrace --info

      - name: Verify APK exists
        run: |
          echo "Checking for APK files..."
          find app/build/outputs/apk -name "*.apk" -type f
          
          if [ ! -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "Error: Release APK not found!"
            echo "Available files in outputs:"
            find app/build/outputs -type f
            exit 1
          fi
          
          echo "✅ Release APK created successfully"

      - name: Get APK info
        run: |
          APK_FILE="app/build/outputs/apk/release/app-release-unsigned.apk"
          APK_SIZE=$(stat -c%s "$APK_FILE" 2>/dev/null || stat -f%z "$APK_FILE")
          APK_SIZE_MB=$(echo "scale=2; $APK_SIZE/1024/1024" | bc -l 2>/dev/null || echo "N/A")
          
          echo "APK_SIZE_BYTES=$APK_SIZE" >> $GITHUB_ENV
          echo "APK_SIZE_MB=$APK_SIZE_MB" >> $GITHUB_ENV
          
          echo "APK Size: $APK_SIZE bytes ($APK_SIZE_MB MB)"

      - name: Rename APK
        run: |
          cd app/build/outputs/apk/release
          APK_FILE=$(ls *.apk | head -n1)
          NEW_NAME="FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk"
          mv "$APK_FILE" "$NEW_NAME"
          echo "APK_FILENAME=$NEW_NAME" >> $GITHUB_ENV
          echo "✅ APK renamed to: $NEW_NAME"

      - name: Generate release notes
        run: |
          VERSION_NAME="${{ github.event.inputs.version_name }}"
          VERSION_CODE="${{ github.event.inputs.version_code }}"
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          APK_SIZE_MB="${{ env.APK_SIZE_MB }}"
          
          BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          cat > release_notes.md << EOF
          # 🖕 FuckDevicePolicy v${VERSION_NAME}
          
          **Enhanced Xposed Module for Comprehensive Device Policy Bypass**
          
          ## 🔓 What's Bypassed
          
          This enhanced version comprehensively bypasses all major device policy restrictions:
          
          ✅ **Installation Restrictions:**
          - \`no_install_unknown_sources\`
          - \`no_install_unknown_sources_globally\`
          
          ✅ **Developer/Debug Restrictions:**
          - \`no_debugging_features\`
          - Developer settings access
          
          ✅ **Cross-Profile Restrictions:**
          - \`no_cross_profile_copy_paste\` 
          - \`no_sharing_into_profile\`
          
          ✅ **Communication Restrictions:**
          - \`no_bluetooth_sharing\`
          - \`no_sharing_admin_configured_wifi\`
          
          ✅ **Content & Privacy Restrictions:**
          - \`no_content_capture\`
          - \`no_share_location\`
          
          ✅ **System Restrictions:**
          - \`no_fun\` (

          ✅ **System Restrictions:**
          - \`no_fun\` (camera, games, entertainment apps)
          - \`no_create_windows\`
          - \`no_system_error_dialogs\`
          - \`ensure_verify_apps\`
          
          ## 📦 Build Information
          
          - **Version:** ${VERSION_NAME} (Build ${VERSION_CODE})
          - **Build Date:** ${BUILD_DATE}
          - **APK Size:** ${APK_SIZE_MB} MB
          - **Min SDK:** 21 (Android 5.0+)
          - **Target SDK:** 34 (Android 14)
          
          ## 🛠️ Installation Requirements
          
          1. **Root Access Required**
          2. **LSPosed Framework** (recommended) or **Xposed Framework**
          3. Android 5.0+ (API 21+)
          
          ## 📱 Installation Steps
          
          1. Install LSPosed/Xposed Framework
          2. Download and install this APK
          3. Enable the module in LSPosed/Xposed
          4. **Reboot your device**
          5. Verify module is working by checking restrictions
          
          ## 🎯 Targeted Packages
          
          The module hooks into these critical system packages:
          - \`android\` (System Framework)
          - \`com.android.settings\`
          - \`com.android.packageinstaller\`
          - \`com.google.android.packageinstaller\`
          - \`com.android.systemui\`
          
          ## ⚠️ Warnings
          
          - **For educational/research purposes only**
          - May void device warranty
          - Use at your own risk
          - Not responsible for device damage
          - Bypass corporate/enterprise policies responsibly
          
          ## 🔄 Changelog
          
          ${RELEASE_NOTES}
          
          ---
          
          **🖕 Fuck restrictive device policies!**
          
          *Built with love and rebellion against corporate control* ❤️
          EOF
          
          echo "Generated release notes"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version_name }}
          name: "🖕 FuckDevicePolicy v${{ github.event.inputs.version_name }}"
          body_path: release_notes.md
          files: |
            app/build/outputs/apk/release/${{ env.APK_FILENAME }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: FuckDevicePolicy-v${{ github.event.inputs.version_name }}
          path: app/build/outputs/apk/release/${{ env.APK_FILENAME }}
          retention-days: 30

      - name: Build Summary
        run: |
          echo "## 🖕 FuckDevicePolicy Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.event.inputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ github.event.inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Size:** ${{ env.APK_SIZE_MB }} MB" >> $GITHUB_STEP_SUMMARY
          echo "- **APK File:** ${{ env.APK_FILENAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔓 Enhanced Features" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unknown Sources Installation Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Developer/Debug Features Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Cross-Profile Restrictions Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Bluetooth & WiFi Sharing Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Content Capture Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Location Sharing Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Camera & Fun Features Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ System Dialog Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ App Verification Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Window Creation Bypass" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Installation" >> $GITHUB_STEP_SUMMARY
          echo "1. Install LSPosed/Xposed Framework" >> $GITHUB_STEP_SUMMARY
          echo "2. Install the APK" >> $GITHUB_STEP_SUMMARY
          echo "3. Enable module in LSPosed/Xposed" >> $GITHUB_STEP_SUMMARY
          echo "4. **Reboot device**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Requirements" >> $GITHUB_STEP_SUMMARY
          echo "- Root access" >> $GITHUB_STEP_SUMMARY
          echo "- LSPosed/Xposed Framework" >> $GITHUB_STEP_SUMMARY
          echo "- Android 5.0+ (API 21+)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🖕 Successfully built comprehensive device policy bypass!**" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up build artifacts..."
          rm -rf ~/.gradle/caches
          rm -rf ~/.android/build-cache
