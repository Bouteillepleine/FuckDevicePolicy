name: Build FuckDevicePolicy

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code'
        required: true
        default: '1'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🏁 Checkout Repository
        uses: actions/checkout@v4

      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🔧 Install SDK Components
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-34" "build-tools;34.0.0"
          echo "✅ Android SDK components installed"

      - name: 📂 Fix Project Structure
        run: |
          echo "🔧 Fixing Gradle configuration files..."
          
          # Create proper settings.gradle (for project dependencies)
          cat > settings.gradle << 'EOF'
          pluginManagement {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }
          dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          rootProject.name = "FuckDevicePolicy"
          include ':app'
          EOF
          
          # Create root build.gradle (with buildscript repositories)
          cat > build.gradle << 'EOF'
          buildscript {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.1.4'
              }
          }
          
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF
          
          # Fix app/build.gradle
          cat > app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }
          
          android {
              namespace 'com.strawing.fuckdevicepolicy'
              compileSdk 34
              
              defaultConfig {
                  applicationId "com.strawing.fuckdevicepolicy"
                  minSdk 21
                  targetSdk 34
                  versionCode ${{ github.event.inputs.version_code }}
                  versionName "${{ github.event.inputs.version_name }}"
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
              
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
              
              lint {
                  abortOnError false
                  checkReleaseBuilds false
              }
          }
          
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'com.google.android.material:material:1.10.0'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
              implementation 'androidx.navigation:navigation-fragment:2.7.4'
              implementation 'androidx.navigation:navigation-ui:2.7.4'
          }
          EOF
          
          # Create gradle.properties
          cat > gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          android.nonTransitiveRClass=false
          EOF
          
          # Create gradle wrapper directory and properties
          mkdir -p gradle/wrapper
          cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
          networkTimeout=10000
          validateDistributionUrl=true
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          echo "✅ Project structure fixed"

      - name: 🔧 Setup Gradle Wrapper
        run: |
          echo "📥 Setting up Gradle Wrapper..."
          
          # Download gradle wrapper jar
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.4.0/gradle/wrapper/gradle-wrapper.jar
          
          # Create proper gradlew script
          cat > gradlew << 'EOF'
          #!/bin/sh
          
          ##############################################################################
          #
          #   Gradle start up script for POSIX generated by Gradle.
          #
          ##############################################################################
          
          # Attempt to set APP_HOME
          # Resolve links: $0 may be a link
          app_path=$0
          
          # Need this for daisy-chained symlinks.
          while
              APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
              [ -h "$app_path" ]
          do
              ls=$( ls -ld "$app_path" )
              link=${ls#*' -> '}
              case $link in             #(
                /*) app_path=$link ;; #(
                *)  app_path=$APP_HOME$link ;;
              esac
          done
          
          APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit
          
          APP_NAME="Gradle"
          APP_BASE_NAME=${0##*/}
          
          # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
          DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
          
          # Use the maximum available, or set MAX_FD != -1 to use that value.
          MAX_FD=maximum
          
          warn () {
              echo "$*"
          } >&2
          
          die () {
              echo
              echo "$*"
              echo
              exit 1
          } >&2
          
          # OS specific support (must be 'true' or 'false').
          cygwin=false
          msys=false
          darwin=false
          nonstop=false
          case "$( uname )" in                #(
            CYGWIN* )         cygwin=true  ;; #(
            Darwin* )         darwin=true  ;; #(
            MSYS* | MINGW* )  msys=true    ;; #(
            NONSTOP* )        nonstop=true ;;
          esac
          
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          
          # Determine the Java command to use to start the JVM.
          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  # IBM's JDK on AIX uses strange locations for the executables
                  JAVACMD=$JAVA_HOME/jre/sh/java
              else
                  JAVACMD=$JAVA_HOME/bin/java
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
          
          Please set the JAVA_HOME variable in your environment to match the
          location of your Java installation."
              fi
          else
              JAVACMD=java
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
          
          Please set the JAVA_HOME variable in your environment to match the
          location of your Java installation."
          fi
          
          # Increase the maximum file descriptors if we can.
          if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
              case $MAX_FD in #(
                max*)
                  MAX_FD=$( ulimit -H -n ) ||
                      warn "Could not query maximum file descriptor limit"
              esac
              case $MAX_FD in  #(
                '' | soft) :;; #(
                *)
                  ulimit -n "$MAX_FD" ||
                      warn "Could not set maximum file descriptor limit to $MAX_FD"
              esac
          fi
          
          # For Cygwin or MSYS, switch paths to Windows format before running java
          if "$cygwin" || "$msys" ; then
              APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
              CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
              JAVACMD=$( cygpath --unix "$JAVACMD" )
          
              # Now convert the arguments - kludge to limit ourselves to /bin/sh
              for arg do
                  if
                      case $arg in                                #(
                        -*)   false ;;                            # don't mess with options #(
                        /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                              [ -e "$t" ] ;;                      #(
                        *)    false ;;
                      esac
                  then
                      arg=$( cygpath --path --ignore --mixed "$arg" )
                  fi
                  shift                   # remove old arg
                  set -- "$@" "$arg"      # push replacement arg
              done
          fi
          
          # Collect all arguments for the java command;
          set -- \
                  "-Dorg.gradle.appname=$APP_BASE_NAME" \
                  -classpath "$CLASSPATH" \
                  org.gradle.wrapper.GradleWrapperMain \
                  "$@"
          
          # Use "xargs" to parse quoted args.
          eval "set -- $(
                  printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
                  xargs -n1 |
                  sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
                  tr '\n' ' '
              )" '"$@"'
          
          exec "$JAVACMD" "$@"
          EOF
          
          # Make gradlew executable
          chmod +x gradlew
          
          echo "✅ Gradle Wrapper setup completed"

      - name: 🔨 Build APK
        run: |
          echo "🔨 Building APK..."
          echo "☕ Java version: $(java -version 2>&1 | head -1)"
          echo "📍 Working directory: $(pwd)"
          echo "🔧 Gradle Wrapper: $(ls -la gradlew)"
          
          # Verify Gradle setup
          echo "📋 Gradle version check:"
          ./gradlew --version
          
          # Build the APK
          echo "🚀 Starting build process..."
          ./gradlew assembleRelease --stacktrace --no-daemon
          
          echo "✅ Build completed successfully!"

      - name: 📦 Prepare APK
        run: |
          echo "🔍 Searching for APK files..."
          find . -name "*.apk" -type f -ls
          
          # Find the APK file
          APK_FILE=$(find . -name "app-release.apk" -type f | head -1)
          
          if [ -n "$APK_FILE" ] && [ -f "$APK_FILE" ]; then
              echo "✅ Found APK: $APK_FILE"
              
              # Copy to root with proper name
              cp "$APK_FILE" "FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk"
              
              # Get file info
              APK_SIZE=$(du -h "FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk" | cut -f1)
              
              echo "📦 APK Size: $APK_SIZE"
              echo "APK_SIZE=$APK_SIZE" >> $GITHUB_ENV
              
              # Verify APK
              ls -la "FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk"
              echo "✅ APK prepared successfully"
          else
              echo "❌ APK file not found!"
              echo "📂 Build outputs:"
              find . -path "*/build/outputs/*" -type f 2>/dev/null || echo "No build outputs found"
              exit 1
          fi

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ github.event.inputs.version_name }}"
          name: "🖕 FuckDevicePolicy v${{ github.event.inputs.version_name }}"
          body: |
            # 🖕 FuckDevicePolicy v${{ github.event.inputs.version_name }}
            
            ## 🔓 **Ultimate Device Policy Bypass Xposed Module**
            
            **Break free from device restrictions!** This powerful Xposed module completely bypasses Android device policy limitations, giving you total control over your device.
            
            ### ✨ **Features:**
            - 🚫 **Unknown Sources Bypass** - Install any APK without restrictions
            - 🔧 **Developer Settings Access** - Full debugging capabilities
            - 📋 **Cross-Profile Operations** - Work/personal profile freedom
            - 📡 **Connectivity Control** - Unrestricted Bluetooth, WiFi, location
            - 📷 **System Access** - Camera, screenshots, content capture
            - 🛡️ **Verification Bypass** - Skip Google Play Protect
            - 🏢 **MDM Liberation** - Break corporate device management
            - 🔒 **Kiosk Mode Escape** - Exit restricted launchers
            - 💪 **Administrative Freedom** - Your device, your rules!
            
            ### 📱 **Installation:**
            1. **Root** your device and install **LSPosed**
            2. **Download** and install the APK below
            3. **Enable** the module in LSPosed Manager
            4. **Reboot** your device
            5. **Enjoy** unrestricted device access! 🎉
            
            ### 📊 **Build Info:**
            - **Version:** ${{ github.event.inputs.version_name }}
            - **Build:** ${{ github.event.inputs.version_code }}
            - **Size:** ${{ env.APK_SIZE }}
            - **Target:** Android 14 (API 34)
            - **Min SDK:** Android 5.0+ (API 21)
            
            ### 🔧 **Compatibility:**
            - **Android:** 5.0 - 14+ (API 21-34+)
            - **Xposed:** LSPosed ✅, EdXposed ✅, Original ✅
            - **Root:** Required for Xposed installation
            - **Architectures:** Universal support
            
            ---
            
            ## 🎉 **Download Your Freedom Below!**
            
            **Built with passion for device liberation** 💪
          files: |
            FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: FuckDevicePolicy-v${{ github.event.inputs.version_name }}
          path: FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk
          retention-days: 90

      - name: 🎉 Success Summary
        run: |
          echo "## 🎉 BUILD SUCCESS!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 **APK Generated:**" >> $GITHUB_STEP_SUMMARY
          echo "- **File:** FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.event.inputs.version_name }} (Build ${{ github.event.inputs.version_code }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Size:** ${{ env.APK_SIZE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package:** com.strawing.fuckdevicepolicy" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 **Download:**" >> $GITHUB_STEP_SUMMARY
          echo "- [📱 **Get APK from Release**](https://github.com/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version_name }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 **Installation:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Install LSPosed on rooted device" >> $GITHUB_STEP_SUMMARY
          echo "2. Install the APK above" >> $GITHUB_STEP_SUMMARY
          echo "3. Enable in LSPosed Manager" >> $GITHUB_STEP_SUMMARY
          echo "4. Reboot device" >> $GITHUB_STEP_SUMMARY
          echo "5. Enjoy total device freedom! 🔓" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 💪 **Your device liberation tool is ready!**" >> $GITHUB_STEP_SUMMARY
