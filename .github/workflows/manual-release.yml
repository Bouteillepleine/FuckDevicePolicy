name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.2.3)'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code (integer)'
        required: true
        default: '1'
      release_notes:
        description: 'Release notes'
        required: true
        default: 'Manual release with bug fixes and improvements'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  manual-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Fix Gradle configuration
        run: |
          echo "Fixing Gradle configuration for compatibility..."
          
          # Create stable settings.gradle
          cat > settings.gradle << 'EOF'
          rootProject.name = "FuckDevicePolicy"
          include ':app'
          EOF
          
          # Create stable root build.gradle
          cat > build.gradle << 'EOF'
          // Top-level build file where you can add configuration options common to all sub-projects/modules.
          buildscript {
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.4.2'
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
                  maven { url "https://api.xposed.info/" }
              }
          }
          
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF
          
          # Update gradle wrapper
          cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.6.1-bin.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          # Fix app build.gradle for compatibility
          cat > app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }
          
          android {
              namespace 'com.bouteillepleine.fuckdevicepolicy'
              compileSdk 33
          
              defaultConfig {
                  applicationId "com.bouteillepleine.fuckdevicepolicy"
                  minSdk 21
                  targetSdk 33
                  versionCode 2
                  versionName "1.1"
          
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
              }
          
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
                  debug {
                      applicationIdSuffix ".debug"
                      versionNameSuffix "-debug"
                  }
              }
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          
              buildFeatures {
                  buildConfig true
              }
          
              lint {
                  abortOnError false
                  checkReleaseBuilds false
              }
          }
          
          dependencies {
              compileOnly 'de.robv.android.xposed:api:82'
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'com.google.android.material:material:1.8.0'
              
              testImplementation 'junit:junit:4.13.2'
              androidTestImplementation 'androidx.test.ext:junit:1.1.5'
              androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
          }
          EOF
          
          echo "✅ Gradle configuration fixed"

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Validate inputs
        run: |
          VERSION_NAME="${{ github.event.inputs.version_name }}"
          VERSION_CODE="${{ github.event.inputs.version_code }}"
          
          # Validate version name format (basic semantic versioning)
          if [[ ! $VERSION_NAME =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version name must be in format X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi
          
          # Validate version code is a positive integer
          if [[ ! $VERSION_CODE =~ ^[1-9][0-9]*$ ]]; then
            echo "Error: Version code must be a positive integer"
            exit 1
          fi
          
          echo "✅ Version validation passed"
          echo "Version Name: $VERSION_NAME"
          echo "Version Code: $VERSION_CODE"

      - name: Update version in build.gradle
        run: |
          VERSION_NAME="${{ github.event.inputs.version_name }}"
          VERSION_CODE="${{ github.event.inputs.version_code }}"
          
          echo "Updating app/build.gradle..."
          
          # Update version code and name
          sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" app/build.gradle
          sed -i "s/versionName \"[^\"]*\"/versionName \"$VERSION_NAME\"/" app/build.gradle
          
          # Verify changes
          echo "=== Updated version info ==="
          grep -n "versionCode\|versionName" app/build.gradle

      - name: Test Gradle wrapper
        run: |
          echo "Testing Gradle wrapper..."
          ./gradlew --version

      - name: Clean project
        run: |
          echo "Cleaning project..."
          ./gradlew clean --stacktrace

      - name: Build debug APK (test build)
        run: |
          echo "Building debug APK for testing..."
          ./gradlew assembleDebug --stacktrace

      - name: Build release APK
        run: |
          echo "Building release APK..."
          ./gradlew assembleRelease --stacktrace

      - name: Verify APK was created
        run: |
          echo "Checking for APK files..."
          find app/build/outputs/apk -name "*.apk" -type f
          
          if [ ! -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "Error: Release APK not found!"
            echo "Available files in outputs:"
            find app/build/outputs -type f
            exit 1
          fi
          
          echo "✅ Release APK created successfully"

      - name: Get APK info
        run: |
          APK_FILE="app/build/outputs/apk/release/app-release-unsigned.apk"
          APK_SIZE=$(stat -c%s "$APK_FILE" 2>/dev/null || stat -f%z "$APK_FILE")
          APK_SIZE_MB=$(echo "scale=2; $APK_SIZE/1024/1024" | bc -l 2>/dev/null || echo "N/A")
          
          echo "APK_SIZE_BYTES=$APK_SIZE" >> $GITHUB_ENV
          echo "APK_SIZE_MB=$APK_SIZE_MB" >> $GITHUB_ENV
          
          echo "APK Size: $APK_SIZE bytes ($APK_SIZE_MB MB)"

      - name: Rename APK
        run: |
          cd app/build/outputs/apk/release
          APK_FILE=$(ls *.apk | head -n1)
          NEW_NAME="FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk"
          mv "$APK_FILE" "$NEW_NAME"
          echo "APK_FILENAME=$NEW_NAME" >> $GITHUB_ENV
          echo "✅ APK renamed to: $NEW_NAME"

      - name: Generate release body
        run: |
          VERSION_NAME="${{ github.event.inputs.version_name }}"
          VERSION_CODE="${{ github.event.inputs.version_code }}"
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          APK_SIZE_MB="${{ env.APK_SIZE_MB }}"
          
          # Get current date
          BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Create release body
          RELEASE_BODY="## 🚀 FuckDevicePolicy v${VERSION_NAME}
          
          # Save to file and environment
          echo "$RELEASE_BODY" > release_body.md
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit version changes
        run: |
          VERSION_NAME="${{ github.event.inputs.version_name }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add only the build.gradle file
          git add app/build.gradle
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🚀 Manual version bump to v${VERSION_NAME}

          - Version Name: ${VERSION_NAME}
          - Version Code: ${{ github.event.inputs.version_code }}
          - Release Type: Manual
          - Build: GitHub Actions"
            
            echo "✅ Changes committed"
          fi

      - name: Create and push tag
        run: |
          VERSION_NAME="${{ github.event.inputs.version_name }}"
          
          # Create annotated tag
          git tag -a "v${VERSION_NAME}" -m "Release v${VERSION_NAME}

          ${{ github.event.inputs.release_notes }}
          
          Version Code: ${{ github.event.inputs.version_code }}
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Built by: GitHub Actions"
          
          # Push changes and tag
          git push origin HEAD:${{ github.ref_name }}
          git push origin "v${VERSION_NAME}"
          
          echo "✅ Tag v${VERSION_NAME} created and pushed"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ github.event.inputs.version_name }}"
          name: "🚀 FuckDevicePolicy v${{ github.event.inputs.version_name }}"
          body: ${{ env.RELEASE_BODY }}
          files: app/build/outputs/apk/release/${{ env.APK_FILENAME }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          make_latest: ${{ !github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "FuckDevicePolicy-v${{ github.event.inputs.version_name }}-artifacts"
          path: |
            app/build/outputs/apk/release/${{ env.APK_FILENAME }}
            release_body.md
            app/build.gradle
          retention-days: 30

      - name: Success summary
        run: |
          echo "🎉 Manual release completed successfully!"
          echo ""
          echo "📄 Release Details:"
          echo "- Version: v${{ github.event.inputs.version_name }}"
          echo "- Version Code: ${{ github.event.inputs.version_code }}"
          echo "- APK: ${{ env.APK_FILENAME }}"
          echo "- Size: ${{ env.APK_SIZE_MB }} MB"
          echo "- Pre-release: ${{ github.event.inputs.prerelease }}"
          echo ""
          echo "🔗 Links:"
          echo "- Release: https://github.com/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version_name }}"
          echo "- APK Download: https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version_name }}/${{ env.APK_FILENAME }}"

      - name: Failure cleanup
        if: failure()
        run: |
          echo "❌ Build failed! Cleaning up..."
          
          # Show recent commits
          echo "Recent commits:"
          git log --oneline -5
          
          # Show build logs if available
          echo "Checking for build logs..."
          find . -name "*.log" -type f | head -5 | xargs tail -20 2>/dev/null || true
          
          # Show Gradle daemon status
          ./gradlew --status || true
          
          echo "Check the logs above for error details."
