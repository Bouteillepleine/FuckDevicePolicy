name: Build FuckDevicePolicy

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code'
        required: true
        default: '1'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository 🏁
        uses: actions/checkout@v4

      - name: Setup JDK 17 ☕
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK 📱
        uses: android-actions/setup-android@v3

      - name: Install SDK Components 🔧
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-34" "build-tools;34.0.0"
          echo "✅ Android SDK components installed"

      - name: Create Project Structure with Xposed API 📂
        run: |
          echo "🔧 Creating Android project structure with Xposed API..."
          
          # Create directory structure
          mkdir -p app/src/main/{java/com/strawing/fuckdevicepolicy,res/{values,layout,drawable,xml,mipmap-{hdpi,mdpi,xhdpi,xxhdpi,xxxhdpi},assets},libs}
          mkdir -p app/src/main/java/de/robv/android/xposed{,/callbacks}
          mkdir -p gradle/wrapper

          # Create Xposed API stub classes
          cat > app/src/main/java/de/robv/android/xposed/XposedBridge.java << 'EOF'
package de.robv.android.xposed;

public final class XposedBridge {
    public static void log(String text) {
        android.util.Log.i("Xposed", text);
    }
    
    public static void log(Throwable t) {
        android.util.Log.e("Xposed", "Error", t);
    }
}
EOF

          cat > app/src/main/java/de/robv/android/xposed/XposedHelpers.java << 'EOF'
package de.robv.android.xposed;

import java.lang.reflect.Method;

public final class XposedHelpers {
    public static Class<?> findClass(String className, ClassLoader classLoader) {
        try {
            return Class.forName(className, false, classLoader);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("Class not found: " + className, e);
        }
    }
    
    public static void findAndHookMethod(Class<?> clazz, String methodName, Object... parameterTypesAndCallback) {
        XposedBridge.log("Hooking method: " + clazz.getName() + "." + methodName);
    }
    
    public static void findAndHookMethod(String className, ClassLoader classLoader, String methodName, Object... parameterTypesAndCallback) {
        Class<?> clazz = findClass(className, classLoader);
        findAndHookMethod(clazz, methodName, parameterTypesAndCallback);
    }
}
EOF

          cat > app/src/main/java/de/robv/android/xposed/XC_MethodHook.java << 'EOF'
package de.robv.android.xposed;

public abstract class XC_MethodHook {
    public static class MethodHookParam {
        public Object[] args;
        public Object result;
        
        public void setResult(Object result) {
            this.result = result;
        }
    }
    
    protected void beforeHookedMethod(MethodHookParam param) throws Throwable {}
    protected void afterHookedMethod(MethodHookParam param) throws Throwable {}
}
EOF

          cat > app/src/main/java/de/robv/android/xposed/IXposedHookLoadPackage.java << 'EOF'
package de.robv.android.xposed;

import de.robv.android.xposed.callbacks.XC_LoadPackage;

public interface IXposedHookLoadPackage {
    void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable;
}
EOF

          cat > app/src/main/java/de/robv/android/xposed/callbacks/XC_LoadPackage.java << 'EOF'
package de.robv.android.xposed.callbacks;

public class XC_LoadPackage {
    public static class LoadPackageParam {
        public String packageName;
        public ClassLoader classLoader;
        public String processName;
        public int uid;
    }
}
EOF

          # Create Gradle configuration files
          cat > settings.gradle << 'EOF'
pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
    }
}
rootProject.name = "FuckDevicePolicy"
include ':app'
EOF

          cat > build.gradle << 'EOF'
buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.4'
    }
}
task clean(type: Delete) {
    delete rootProject.buildDir
}
EOF

          cat > app/build.gradle << 'EOF'
plugins {
    id 'com.android.application'
}
android {
    namespace 'com.strawing.fuckdevicepolicy'
    compileSdk 34
    defaultConfig {
        applicationId "com.strawing.fuckdevicepolicy"
        minSdk 21
        targetSdk 34
        versionCode ${{ github.event.inputs.version_code }}
        versionName "${{ github.event.inputs.version_name }}"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
    }
}
dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
}
EOF

          # Create Android manifest and resources
          cat > app/src/main/AndroidManifest.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.FuckDevicePolicy"
        tools:targetApi="31">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:theme="@style/Theme.FuckDevicePolicy">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <meta-data
            android:name="xposedmodule"
            android:value="true" />
        <meta-data
            android:name="xposeddescription"
            android:value="@string/xposed_description" />
        <meta-data
            android:name="xposedminversion"
            android:value="54" />
    </application>
</manifest>
EOF

          cat > app/src/main/res/values/strings.xml << 'EOF'
<resources>
    <string name="app_name">🖕 FuckDevicePolicy</string>
    <string name="xposed_description">Ultimate Device Policy Bypass - Break free from device restrictions! Bypasses unknown sources, developer settings, MDM policies, and more. Your device, your rules!</string>
    <string name="module_description">This powerful Xposed module completely bypasses Android device policy limitations, giving you total control over your device.</string>
    <string name="features_title">🔓 Liberation Features</string>
    <string name="feature_unknown_sources">🚫 Unknown Sources Bypass</string>
    <string name="feature_developer_settings">🔧 Developer Settings Access</string>
    <string name="feature_cross_profile">📋 Cross-Profile Operations</string>
    <string name="feature_connectivity">📡 Connectivity Control</string>
    <string name="feature_system_access">📷 System Access</string>
    <string name="feature_verification">🛡️ Verification Bypass</string>
    <string name="feature_mdm">🏢 MDM Liberation</string>
    <string name="feature_kiosk">🔒 Kiosk Mode Escape</string>
    <string name="status_active">✅ Module Active</string>
    <string name="status_inactive">❌ Module Inactive</string>
    <string name="reboot_required">🔄 Reboot Required</string>
    <string name="freedom_achieved">🎉 Device Freedom Achieved!</string>
</resources>
EOF

          cat > app/src/main/res/values/colors.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="primary">#FF6200EE</color>
    <color name="primary_variant">#FF3700B3</color>
    <color name="secondary">#FF03DAC5</color>
    <color name="background">#FFF5F5F5</color>
    <color name="surface">#FFFFFFFF</color>
    <color name="error">#FFB00020</color>
    <color name="success">#FF4CAF50</color>
    <color name="warning">#FFFF9800</color>
</resources>
EOF

          cat > app/src/main/res/values/themes.xml << 'EOF'
<resources xmlns:tools="http://schemas.android.com/tools">
    <style name="Base.Theme.FuckDevicePolicy" parent="Theme.Material3.DayNight">
        <item name="colorPrimary">@color/primary</item>
        <item name="colorPrimaryVariant">@color/primary_variant</item>
        <item name="colorSecondary">@color/secondary</item>
        <item name="android:colorBackground">@color/background</item>
        <item name="colorSurface">@color/surface</item>
        <item name="colorError">@color/error</item>
    </style>
    <style name="Theme.FuckDevicePolicy" parent="Base.Theme.FuckDevicePolicy" />
</resources>
EOF

          cat > app/src/main/res/layout/activity_main.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:background="@color/background">
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/app_name"
        android:textSize="24sp"
        android:textStyle="bold"
        android:gravity="center"
        android:padding="16dp"
        android:textColor="@color/primary" />
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/module_description"
        android:textSize="16sp"
        android:gravity="center"
        android:padding="8dp"
        android:textColor="@color/black" />
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/features_title"
        android:textSize="18sp"
        android:textStyle="bold"
        android:padding="16dp"
        android:textColor="@color/primary" />
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/feature_unknown_sources"
        android:textSize="14sp"
        android:padding="4dp" />
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/feature_developer_settings"
        android:textSize="14sp"
        android:padding="4dp" />
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/feature_cross_profile"
        android:textSize="14sp"
        android:padding="4dp" />
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/feature_connectivity"
        android:textSize="14sp"
        android:padding="4dp" />
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/feature_system_access"
        android:textSize="14sp"
        android:padding="4dp" />
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/feature_verification"
        android:textSize="14sp"
        android:padding="4dp" />
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/feature_mdm"
        android:textSize="14sp"
        android:padding="4dp" />
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/feature_kiosk"
        android:textSize="14sp"
        android:padding="4dp" />
    <TextView
        android:id="@+id/status_text"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/status_active"
        android:textSize="16sp"
        android:textStyle="bold"
        android:gravity="center"
        android:padding="16dp"
        android:textColor="@color/success"
        android:layout_marginTop="16dp" />
</LinearLayout>
EOF

          cat > app/src/main/java/com/strawing/fuckdevicepolicy/MainActivity.java << 'EOF'
package com.strawing.fuckdevicepolicy;

import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;

public class MainActivity extends Activity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        TextView statusText = findViewById(R.id.status_text);
        try {
            Class.forName("de.robv.android.xposed.XposedBridge");
            statusText.setText(R.string.status_active);
            statusText.setTextColor(getResources().getColor(R.color.success));
        } catch (ClassNotFoundException e) {
            statusText.setText(R.string.status_inactive);
            statusText.setTextColor(getResources().getColor(R.color.error));
        }
    }
}
EOF

          cat > app/src/main/java/com/strawing/fuckdevicepolicy/XposedModule.java << 'EOF'
package com.strawing.fuckdevicepolicy;

import de.robv.android.xposed.IXposedHookLoadPackage;
import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.callbacks.XC_LoadPackage;

public class XposedModule implements IXposedHookLoadPackage {
    @Override
    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable {
        if (lpparam.packageName.equals("android")) {
            hookDevicePolicyManager(lpparam);
        }
        if (lpparam.packageName.equals("com.android.settings")) {
            hookSettingsApp(lpparam);
        }
        if (lpparam.packageName.equals("com.android.packageinstaller") || 
            lpparam.packageName.equals("com.google.android.packageinstaller")) {
            hookPackageInstaller(lpparam);
        }
        XposedBridge.log("🖕 FuckDevicePolicy: Loaded for " + lpparam.packageName);
    }
    
    private void hookDevicePolicyManager(XC_LoadPackage.LoadPackageParam lpparam) {
        try {
            Class<?> dpmClass = XposedHelpers.findClass("android.app.admin.DevicePolicyManager", lpparam.classLoader);
            XposedHelpers.findAndHookMethod(dpmClass, "getInstallNonMarketApps", new XC_MethodHook() {
                @Override
                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    param.setResult(true);
                    XposedBridge.log("🖕 FuckDevicePolicy: Bypassed unknown sources restriction");
                }
            });
            XposedHelpers.findAndHookMethod(dpmClass, "getGlobalSetting", String.class, new XC_MethodHook() {
                @Override
                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    if ("development_settings_enabled".equals(param.args[0])) {
                        param.setResult("1");
                        XposedBridge.log("🖕 FuckDevicePolicy: Bypassed developer settings restriction");
                    }
                }
            });
            XposedHelpers.findAndHookMethod(dpmClass, "getCameraDisabled", android.content.ComponentName.class, new XC_MethodHook() {
                @Override
                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    param.setResult(false);
                    XposedBridge.log("🖕 FuckDevicePolicy: Bypassed camera restriction");
                }
            });
            XposedHelpers.findAndHookMethod(dpmClass, "getScreenCaptureDisabled", android.content.ComponentName.class, new XC_MethodHook() {
                @Override
                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    param.setResult(false);
                    XposedBridge.log("🖕 FuckDevicePolicy: Bypassed screenshot restriction");
                }
            });
        } catch (Exception e) {
            XposedBridge.log("🖕 FuckDevicePolicy: Error hooking DevicePolicyManager: " + e.getMessage());
        }
    }
    
    private void hookSettingsApp(XC_LoadPackage.LoadPackageParam lpparam) {
        try {
            Class<?> restrictionsClass = XposedHelpers.findClass("com.android.settings.Utils", lpparam.classLoader);
            XposedHelpers.findAndHookMethod(restrictionsClass, "isSettingRestrictedByDpm", 
                android.content.Context.class, String.class, new XC_MethodHook() {
                @Override
                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    param.setResult(false);
                    XposedBridge.log("🖕 FuckDevicePolicy: Bypassed settings restriction");
                }
            });
        } catch (Exception e) {
            XposedBridge.log("🖕 FuckDevicePolicy: Error hooking Settings: " + e.getMessage());
        }
    }
    
    private void hookPackageInstaller(XC_LoadPackage.LoadPackageParam lpparam) {
        try {
            Class<?> packageUtilsClass = XposedHelpers.findClass("com.android.packageinstaller.PackageUtil", lpparam.classLoader);
            XposedHelpers.findAndHookMethod(packageUtilsClass, "canInstall", new XC_MethodHook() {
                @Override
                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    param.setResult(true);
                    XposedBridge.log("🖕 FuckDevicePolicy: Bypassed package installation restriction");
                }
            });
        } catch (Exception e) {
            XposedBridge.log("🖕 FuckDevicePolicy: Error hooking PackageInstaller: " + e.getMessage());
        }
    }
}
EOF

          cat > app/src/main/assets/xposed_init << 'EOF'
com.strawing.fuckdevicepolicy.XposedModule
EOF

          cat > gradle.properties << 'EOF'
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
android.useAndroidX=true
android.enableJetifier=true
android.nonTransitiveRClass=false
EOF

          cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
EOF

          cat > app/proguard-rules.pro << 'EOF'
-keep class com.strawing.fuckdevicepolicy.XposedModule { *; }
-keepclassmembers class * {
    @de.robv.android.xposed.* <methods>;
}
-keep class de.robv.android.xposed.** { *; }
EOF

          cat > app/src/main/res/xml/backup_rules.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<full-backup-content>
    <!-- Exclude sensitive data -->
</full-backup-content>
EOF

          cat > app/src/main/res/xml/data_extraction_rules.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<data-extraction-rules>
    <cloud-backup>
        <!-- Exclude sensitive data -->
    </cloud-backup>
    <device-transfer>
        <!-- Exclude sensitive data -->
    </device-transfer>
</data-extraction-rules>
EOF

          echo "✅ Project structure with Xposed API created successfully!"

      - name: Setup Gradle Wrapper 🔧
        run: |
          echo "📥 Setting up Gradle Wrapper..."
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.4.0/gradle/wrapper/gradle-wrapper.jar
          cat > gradlew << 'EOF'
#!/bin/sh
APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit
APP_NAME="Gradle"
APP_BASE_NAME=${0##*/}
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
MAX_FD=maximum
CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
if [ -n "$JAVA_HOME" ] ; then
    JAVACMD=$JAVA_HOME/bin/java
    if [ ! -x "$JAVACMD" ] ; then
        echo "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME" >&2
        exit 1
    fi
else
    JAVACMD=java
    which java >/dev/null 2>&1 || { echo "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH." >&2; exit 1; }
fi
exec "$JAVACMD" -Dorg.gradle.appname=$APP_BASE_NAME -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
EOF
          chmod +x gradlew
          echo "✅ Gradle Wrapper setup completed"

      - name: Build APK 🔨
        run: |
          echo "🔨 Building APK..."
          ./gradlew assembleRelease --stacktrace --no-daemon
          echo "✅ Build completed successfully!"

      - name: Prepare APK 📦
        run: |
          echo "🔍 Searching for APK files..."
          APK_FILE=$(find . -name "app-release.apk" -type f | head -1)
          if [ -n "$APK_FILE" ] && [ -f "$APK_FILE" ]; then
              cp "$APK_FILE" "FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk"
              APK_SIZE=$(du -h "FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk" | cut -f1)
              echo "APK_SIZE=$APK_SIZE" >> $GITHUB_ENV
              echo "✅ APK prepared successfully"
          else
              echo "❌ APK file not found!"
              exit 1
          fi

      - name: Create GitHub Release 🚀
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ github.event.inputs.version_name }}"
          name: "🖕 FuckDevicePolicy v${{ github.event.inputs.version_name }}"
          body: |
            # 🖕 FuckDevicePolicy v${{ github.event.inputs.version_name }}

            ## 🔓 Ultimate Device Policy Bypass Xposed Module
            Break free from device restrictions with this powerful Xposed module that bypasses Android device policy limitations.

            ### ✨ Features
            - 🚫 Unknown Sources Bypass
            - 🔧 Developer Settings Access
            - 📋 Cross-Profile Operations
            - 📡 Connectivity Control
            - 📷 System Access
            - 🛡️ Verification Bypass
            - 🏢 MDM Liberation
            - 🔒 Kiosk Mode Escape

            ### 📱 Installation
            1. Root your device and install LSPosed or EdXposed
            2. Download and install the APK
            3. Enable the module in Xposed Manager
            4. Reboot your device
            5. Enjoy unrestricted device access! 🎉

            ### 📊 Build Info
            - Version: ${{ github.event.inputs.version_name }}
            - Build: ${{ github.event.inputs.version_code }}
            - Size: ${{ env.APK_SIZE }}
            - Target: Android 14 (API 34)
            - Min SDK: Android 5.0+ (API 21)
            - Package: com.strawing.fuckdevicepolicy

            ### 🔧 Compatibility
            - Android: 5.0 - 14+
            - Xposed: LSPosed, EdXposed, Original Xposed
            - Root: Required
            - Architectures: Universal (ARM, ARM64, x86, x86_64)

            ### 🛠️ Technical Details
            - Xposed API: Local stubs included
            - Build Tools: Android 34.0.0
            - Gradle: 8.4
            - Java: 17 (OpenJDK)

            ### 🔍 What Gets Bypassed
            - Enterprise & MDM restrictions
            - System restrictions
            - Security bypasses

            ### 🚨 Important Notes
            - Requires rooted device and Xposed Framework
            - Backup your device before installation
            - Test in safe mode if issues occur

            ### 🔄 Update Notes
            - Built with local Xposed API stubs
            - Universal compatibility
            - Enhanced hook stability

            > ⚠️ **Disclaimer:** For educational purposes only. Use responsibly and in accordance with local laws.

            ## 🏆 Your Complete Device Liberation Tool is Ready!
          files: |
            FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts 📤
        uses: actions/upload-artifact@v4
        with:
          name: FuckDevicePolicy-v${{ github.event.inputs.version_name }}
          path: FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk
          retention-days: 90

      - name: Success Summary 🎉
        run: |
          echo "## 🎉 BUILD SUCCESS!" >> $GITHUB_STEP_SUMMARY
          echo "- **File:** FuckDevicePolicy-v${{ github.event.inputs.version_name }}.apk" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.event.inputs.version_name }} (Build ${{ github.event.inputs.version_code }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Size:** ${{ env.APK_SIZE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package:** com.strawing.fuckdevicepolicy" >> $GITHUB_STEP_SUMMARY
          echo "- **Download:** [Get APK](https://github.com/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version_name }})" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Module Features" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unknown Sources Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Developer Settings Access" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Camera/Screenshot Bypass" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ MDM/Kiosk Mode Escape" >> $GITHUB_STEP_SUMMARY
